// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: blockchain.proto

package medicalpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MedicalService_GenerateNewAccount_FullMethodName = "/medical.MedicalService/GenerateNewAccount"
	MedicalService_DepositAccount_FullMethodName     = "/medical.MedicalService/DepositAccount"
	MedicalService_AddMedicalRecord_FullMethodName   = "/medical.MedicalService/AddMedicalRecord"
	MedicalService_GetRecord_FullMethodName          = "/medical.MedicalService/GetRecord"
	MedicalService_GrantAccess_FullMethodName        = "/medical.MedicalService/GrantAccess"
	MedicalService_RevokeAccess_FullMethodName       = "/medical.MedicalService/RevokeAccess"
)

// MedicalServiceClient is the medicalpb API for MedicalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MedicalServiceClient interface {
	GenerateNewAccount(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AccountResponse, error)
	DepositAccount(ctx context.Context, in *DepositRequest, opts ...grpc.CallOption) (*Empty, error)
	AddMedicalRecord(ctx context.Context, in *MedicalRecordRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	GetRecord(ctx context.Context, in *GetRecordRequest, opts ...grpc.CallOption) (*GetRecordResponse, error)
	GrantAccess(ctx context.Context, in *AccessRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	RevokeAccess(ctx context.Context, in *AccessRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
}

type medicalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMedicalServiceClient(cc grpc.ClientConnInterface) MedicalServiceClient {
	return &medicalServiceClient{cc}
}

func (c *medicalServiceClient) GenerateNewAccount(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountResponse)
	err := c.cc.Invoke(ctx, MedicalService_GenerateNewAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalServiceClient) DepositAccount(ctx context.Context, in *DepositRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, MedicalService_DepositAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalServiceClient) AddMedicalRecord(ctx context.Context, in *MedicalRecordRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, MedicalService_AddMedicalRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalServiceClient) GetRecord(ctx context.Context, in *GetRecordRequest, opts ...grpc.CallOption) (*GetRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRecordResponse)
	err := c.cc.Invoke(ctx, MedicalService_GetRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalServiceClient) GrantAccess(ctx context.Context, in *AccessRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, MedicalService_GrantAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalServiceClient) RevokeAccess(ctx context.Context, in *AccessRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, MedicalService_RevokeAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MedicalServiceServer is the server API for MedicalService service.
// All implementations must embed UnimplementedMedicalServiceServer
// for forward compatibility.
type MedicalServiceServer interface {
	GenerateNewAccount(context.Context, *Empty) (*AccountResponse, error)
	DepositAccount(context.Context, *DepositRequest) (*Empty, error)
	AddMedicalRecord(context.Context, *MedicalRecordRequest) (*TransactionResponse, error)
	GetRecord(context.Context, *GetRecordRequest) (*GetRecordResponse, error)
	GrantAccess(context.Context, *AccessRequest) (*TransactionResponse, error)
	RevokeAccess(context.Context, *AccessRequest) (*TransactionResponse, error)
	mustEmbedUnimplementedMedicalServiceServer()
}

// UnimplementedMedicalServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMedicalServiceServer struct{}

func (UnimplementedMedicalServiceServer) GenerateNewAccount(context.Context, *Empty) (*AccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateNewAccount not implemented")
}
func (UnimplementedMedicalServiceServer) DepositAccount(context.Context, *DepositRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositAccount not implemented")
}
func (UnimplementedMedicalServiceServer) AddMedicalRecord(context.Context, *MedicalRecordRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMedicalRecord not implemented")
}
func (UnimplementedMedicalServiceServer) GetRecord(context.Context, *GetRecordRequest) (*GetRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecord not implemented")
}
func (UnimplementedMedicalServiceServer) GrantAccess(context.Context, *AccessRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantAccess not implemented")
}
func (UnimplementedMedicalServiceServer) RevokeAccess(context.Context, *AccessRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeAccess not implemented")
}
func (UnimplementedMedicalServiceServer) mustEmbedUnimplementedMedicalServiceServer() {}
func (UnimplementedMedicalServiceServer) testEmbeddedByValue()                        {}

// UnsafeMedicalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MedicalServiceServer will
// result in compilation errors.
type UnsafeMedicalServiceServer interface {
	mustEmbedUnimplementedMedicalServiceServer()
}

func RegisterMedicalServiceServer(s grpc.ServiceRegistrar, srv MedicalServiceServer) {
	// If the following call pancis, it indicates UnimplementedMedicalServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MedicalService_ServiceDesc, srv)
}

func _MedicalService_GenerateNewAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalServiceServer).GenerateNewAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicalService_GenerateNewAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalServiceServer).GenerateNewAccount(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalService_DepositAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalServiceServer).DepositAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicalService_DepositAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalServiceServer).DepositAccount(ctx, req.(*DepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalService_AddMedicalRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MedicalRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalServiceServer).AddMedicalRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicalService_AddMedicalRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalServiceServer).AddMedicalRecord(ctx, req.(*MedicalRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalService_GetRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalServiceServer).GetRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicalService_GetRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalServiceServer).GetRecord(ctx, req.(*GetRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalService_GrantAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalServiceServer).GrantAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicalService_GrantAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalServiceServer).GrantAccess(ctx, req.(*AccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalService_RevokeAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalServiceServer).RevokeAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicalService_RevokeAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalServiceServer).RevokeAccess(ctx, req.(*AccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MedicalService_ServiceDesc is the grpc.ServiceDesc for MedicalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MedicalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "medical.MedicalService",
	HandlerType: (*MedicalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateNewAccount",
			Handler:    _MedicalService_GenerateNewAccount_Handler,
		},
		{
			MethodName: "DepositAccount",
			Handler:    _MedicalService_DepositAccount_Handler,
		},
		{
			MethodName: "AddMedicalRecord",
			Handler:    _MedicalService_AddMedicalRecord_Handler,
		},
		{
			MethodName: "GetRecord",
			Handler:    _MedicalService_GetRecord_Handler,
		},
		{
			MethodName: "GrantAccess",
			Handler:    _MedicalService_GrantAccess_Handler,
		},
		{
			MethodName: "RevokeAccess",
			Handler:    _MedicalService_RevokeAccess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blockchain.proto",
}

// Code generated by MockGen. DO NOT EDIT.
// Source: D:\Studying\vkr_services\auth\internal\service\contract.go
//
// Generated by this command:
//
//	mockgen -source=D:\Studying\vkr_services\auth\internal\service\contract.go -destination=service_mock .go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	model "auth/internal/model"
	medicalpb "auth/pkg/transport/medicalpb"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetUserByUsername mocks base method.
func (m *MockRepository) GetUserByUsername(ctx context.Context, username string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", ctx, username)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockRepositoryMockRecorder) GetUserByUsername(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockRepository)(nil).GetUserByUsername), ctx, username)
}

// RegisterUser mocks base method.
func (m *MockRepository) RegisterUser(ctx context.Context, user model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockRepositoryMockRecorder) RegisterUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockRepository)(nil).RegisterUser), ctx, user)
}

// MockBlockchainProcessor is a mock of BlockchainProcessor interface.
type MockBlockchainProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockBlockchainProcessorMockRecorder
	isgomock struct{}
}

// MockBlockchainProcessorMockRecorder is the mock recorder for MockBlockchainProcessor.
type MockBlockchainProcessorMockRecorder struct {
	mock *MockBlockchainProcessor
}

// NewMockBlockchainProcessor creates a new mock instance.
func NewMockBlockchainProcessor(ctrl *gomock.Controller) *MockBlockchainProcessor {
	mock := &MockBlockchainProcessor{ctrl: ctrl}
	mock.recorder = &MockBlockchainProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockchainProcessor) EXPECT() *MockBlockchainProcessorMockRecorder {
	return m.recorder
}

// GenerateNewAccount mocks base method.
func (m *MockBlockchainProcessor) GenerateNewAccount(ctx context.Context, req *medicalpb.Empty) (*medicalpb.AccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateNewAccount", ctx, req)
	ret0, _ := ret[0].(*medicalpb.AccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateNewAccount indicates an expected call of GenerateNewAccount.
func (mr *MockBlockchainProcessorMockRecorder) GenerateNewAccount(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateNewAccount", reflect.TypeOf((*MockBlockchainProcessor)(nil).GenerateNewAccount), ctx, req)
}
